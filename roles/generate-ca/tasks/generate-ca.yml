- name: install git
  become: true
  apt:
    name: git
    update_cache: yes

- name: install kubectl
  become: true
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.13.3/bin/linux/amd64/kubectl
    dest: /usr/local/bin/kubectl
    mode: a+x

- name: install cfssl
  become: true
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
    dest: /usr/local/bin/cfssl
    mode: a+x

- name: install cfssljson
  become: true
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
    dest: /usr/local/bin/cfssljson
    mode: a+x

- name: create certificate directory
  file:
    path: ~/certificate-template
    state: directory

- name: copy worker certificate
  template:
    src: "worker-csr.json.j2"
    dest: "~/certificate-template/{{ item }}-csr.json"
  with_items: "{{ groups['worker'] }}"

- name: copy all template
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  with_items:
    - { src: 'admin-csr.json.j2', dest: '~/certificate-template/admin-csr.json' }
    - { src: 'ca-config.json.j2', dest: '~/certificate-template/ca-config.json' }
    - { src: 'ca-csr.json.j2', dest: '~/certificate-template/ca-csr.json' }
    - { src: 'kube-controller-manager-csr.json.j2', dest: '~/certificate-template/kube-controller-manager-csr.json' }
    - { src: 'kube-proxy-csr.json.j2', dest: '~/certificate-template/kube-proxy-csr.json' }
    - { src: 'kube-scheduler-csr.json.j2', dest: '~/certificate-template/kube-scheduler-csr.json' }
    - { src: 'kubernetes-csr.json.j2', dest: '~/certificate-template/kubernetes-csr.json' }
    - { src: 'service-account-csr.json.j2', dest: '~/certificate-template/service-account-csr.json' }

- name: generate CA 
  shell: cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  args:
    chdir: ~/certificate-template

- name: generate admin certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    admin-csr.json | cfssljson -bare admin

- name: generate worker certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -hostname={{ item }} \
    -profile=kubernetes \
    {{ item }}-csr.json | cfssljson -bare {{ item }}
  with_items: "{{ groups['worker'] }}"

- name: generate controller-manager certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager

- name: generate kube-proxy certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    kube-proxy-csr.json | cfssljson -bare kube-proxy

- name: generate scheduler certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    kube-scheduler-csr.json | cfssljson -bare kube-scheduler
    
- name: generate service-account certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    service-account-csr.json | cfssljson -bare service-account

- name: generate api-server certificate
  vars:
    etcd_ip: "{{ groups['etcd'] | join(',') }}"
    master_ip: "{{ groups['master'] | join(',') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -hostname=10.32.0.1,{{ etcd_ip }},{{ master_ip }},{{ virtual_ip }},127.0.0.1,kubernetes.default \
    -profile=kubernetes \
    kubernetes-csr.json | cfssljson -bare kubernetes

- name: copy cert into worker node
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ worker_ip }}; do
      scp ca.pem ${instance}:~/
      scp ${instance}-key.pem ${instance}:~/
      scp ${instance}.pem ${instance}:~/
    done

- name: copy cert into etcd node
  vars:
    etcd_ip: "{{ groups['etcd'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ etcd_ip }}; do
      scp ca.pem ${instance}:~/
      scp kubernetes-key.pem ${instance}:~/
      scp kubernetes.pem ${instance}:~/
    done

- name: copy cert into master node
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ master_ip }}; do
      scp ca.pem ${instance}:~/
      scp ca-key.pem ${instance}:~/
      scp kubernetes-key.pem ${instance}:~/
      scp kubernetes.pem ${instance}:~/
      scp service-account-key.pem ${instance}:~/
      scp service-account.pem ${instance}:~/
    done

- name: generate kubeconfig for kubelet
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ worker_ip }}; do
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:6443 \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate=${instance}.pem \
        --client-key=${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

- name: generate kubeconfig for kubeproxy
  args:
    chdir: ~/certificate-template
  shell: |
    kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:6443 \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config set-credentials system:kube-proxy \
        --client-certificate=kube-proxy.pem \
        --client-key=kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:kube-proxy \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

- name: generate kubeconfig for controller-manager
  args:
    chdir: ~/certificate-template
  shell: |
    kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config set-credentials system:kube-controller-manager \
        --client-certificate=kube-controller-manager.pem \
        --client-key=kube-controller-manager-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:kube-controller-manager \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig