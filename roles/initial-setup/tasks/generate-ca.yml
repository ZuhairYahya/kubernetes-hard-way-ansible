---
- name: create certificate directory
  file:
    path: ~/certificate-template
    state: directory

- name: copy worker certificate
  template:
    src: "worker-csr.json.j2"
    dest: "~/certificate-template/{{ item }}-csr.json"
  with_items: "{{ groups['worker'] }}"

- name: copy master certificate
  template:
    src: "master-csr.json.j2"
    dest: "~/certificate-template/{{ item }}-csr.json"
  with_items: "{{ groups['master'] }}"

- name: copy all template
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  with_items:
    - { src: 'admin-csr.json.j2', dest: '~/certificate-template/admin-csr.json' }
    - { src: 'ca-config.json.j2', dest: '~/certificate-template/ca-config.json' }
    - { src: 'ca-csr.json.j2', dest: '~/certificate-template/ca-csr.json' }
    - { src: 'kube-controller-manager-csr.json.j2', dest: '~/certificate-template/kube-controller-manager-csr.json' }
    - { src: 'kube-proxy-csr.json.j2', dest: '~/certificate-template/kube-proxy-csr.json' }
    - { src: 'kube-scheduler-csr.json.j2', dest: '~/certificate-template/kube-scheduler-csr.json' }
    - { src: 'kubernetes-csr.json.j2', dest: '~/certificate-template/kubernetes-csr.json' }
    - { src: 'service-account-csr.json.j2', dest: '~/certificate-template/service-account-csr.json' }
    - { src: 'metrics-server-csr.json.j2', dest: '~/certificate-template/metrics-server-csr.json' }


- name: generate CA 
  shell: cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  args:
    chdir: ~/certificate-template

- name: generate admin certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    admin-csr.json | cfssljson -bare admin

- name: generate worker certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -hostname={{ item }} \
    -profile=kubernetes \
    {{ item }}-csr.json | cfssljson -bare {{ item }}
  with_items: "{{ groups['worker'] }}"

- name: generate master certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -hostname={{ item }} \
    -profile=kubernetes \
    {{ item }}-csr.json | cfssljson -bare {{ item }}
  with_items: "{{ groups['master'] }}"

- name: generate controller-manager certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager

- name: generate kube-proxy certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    kube-proxy-csr.json | cfssljson -bare kube-proxy

- name: generate scheduler certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    kube-scheduler-csr.json | cfssljson -bare kube-scheduler
    
- name: generate service-account certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    service-account-csr.json | cfssljson -bare service-account

- name: generate metrics-server certificate
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    metrics-server-csr.json | cfssljson -bare aggregator-proxy-client

- name: generate api-server certificate
  vars:
    etcd_ip: "{{ groups['etcd'] | join(',') }}"
    master_ip: "{{ groups['master'] | join(',') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -hostname=10.32.0.1,{{ etcd_ip }},{{ master_ip }},{{ virtual_ip }},127.0.0.1,kubernetes,kubernetes.default \
    -profile=kubernetes \
    kubernetes-csr.json | cfssljson -bare kubernetes

- name: copy cert into worker node
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ worker_ip }}; do
      scp ca.pem {{user}}@${instance}:~/
      scp ${instance}-key.pem {{user}}@${instance}:~/
      scp ${instance}.pem {{user}}@${instance}:~/
    done

- name: copy cert into etcd node
  vars:
    etcd_ip: "{{ groups['etcd'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ etcd_ip }}; do
      scp ca.pem {{user}}@${instance}:~/
      scp kubernetes-key.pem {{user}}@${instance}:~/
      scp kubernetes.pem {{user}}@${instance}:~/
    done

- name: copy cert into master node
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ master_ip }}; do
      scp ca.pem {{user}}@${instance}:~/
      scp ca-key.pem {{user}}@${instance}:~/
      scp kubernetes-key.pem {{user}}@${instance}:~/
      scp kubernetes.pem {{user}}@${instance}:~/
      scp service-account-key.pem {{user}}@${instance}:~/
      scp service-account.pem {{user}}@${instance}:~/
      scp aggregator-proxy-client.pem {{user}}@${instance}:~/
      scp aggregator-proxy-client-key.pem {{user}}@${instance}:~/
      scp ${instance}-key.pem {{user}}@${instance}:~/
      scp ${instance}.pem {{user}}@${instance}:~/
    done
