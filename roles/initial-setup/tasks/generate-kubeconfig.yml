---
- name: generate kubeconfig for kubelet worker
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    for instance in {{ worker_ip }}; do
      kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ infrastructure.keepalived.virtualIP }}:{{ infrastructure.keepalived.virtualIPPort }}\
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate=${instance}.pem \
        --client-key=${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

- name: generate kubeconfig for kubelet master
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    for instance in {{ master_ip }}; do
      kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ infrastructure.keepalived.virtualIP }}:{{ infrastructure.keepalived.virtualIPPort }}\
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate=${instance}.pem \
        --client-key=${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

- name: generate kubeconfig for kubeproxy
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ infrastructure.keepalived.virtualIP }}:{{ infrastructure.keepalived.virtualIPPort }} \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config set-credentials system:kube-proxy \
        --client-certificate=kube-proxy.pem \
        --client-key=kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:kube-proxy \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

- name: generate kubeconfig for controller-manager
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config set-credentials system:kube-controller-manager \
        --client-certificate=kube-controller-manager.pem \
        --client-key=kube-controller-manager-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:kube-controller-manager \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig

- name: generate kubeconfig for scheduler
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config set-credentials system:kube-scheduler \
        --client-certificate=kube-scheduler.pem \
        --client-key=kube-scheduler-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config set-context {{ kubernetes.clusterName }} \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:kube-scheduler \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config use-context {{ kubernetes.clusterName }} --kubeconfig=kube-scheduler.kubeconfig

- name: generate kubeconfig for client
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ infrastructure.keepalived.virtualIP }}:{{ infrastructure.keepalived.virtualIPPort }} \
        --kubeconfig=client.kubeconfig

    kubectl config set-credentials admin \
        --client-certificate=admin.pem \
        --client-key=admin-key.pem \
        --embed-certs=true \
        --kubeconfig=client.kubeconfig

    kubectl config set-context {{ kubernetes.clusterName }} \
        --cluster={{ kubernetes.clusterName }} \
        --user=admin \
        --kubeconfig=client.kubeconfig

    kubectl config use-context {{ kubernetes.clusterName }} --kubeconfig=client.kubeconfig
  when: kubernetes.certificate.createClientKubeconfig

- name: generate kubeconfig for client oidc
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ infrastructure.keepalived.virtualIP }}:{{ infrastructure.keepalived.virtualIPPort }} \
        --kubeconfig=client-oidc.kubeconfig
  when: kubernetes.addonsComponents.oidc.enabled

- name: create .kube directory
  file:
    path: /home/{{ user }}/.kube/
    state: directory
  when: kubernetes.certificate.createClientKubeconfig

- name: Copy client.kubeconfig to .kube directory
  copy: 
    src: "{{ kubernetes.certificate.directory }}/client.kubeconfig"
    dest: "/home/{{ user }}/.kube/config"
    remote_src: yes
  when: kubernetes.certificate.createClientKubeconfig

- name: generate kubeconfig for admin
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=admin.kubeconfig

    kubectl config set-credentials admin \
        --client-certificate=admin.pem \
        --client-key=admin-key.pem \
        --embed-certs=true \
        --kubeconfig=admin.kubeconfig

    kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=admin \
        --kubeconfig=admin.kubeconfig

    kubectl config use-context default --kubeconfig=admin.kubeconfig

- name: copy kubeconfig into worker node
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    for instance in {{ worker_ip }}; do
        scp ${instance}.kubeconfig {{ user }}@${instance}:~/
        scp kube-proxy.kubeconfig {{ user }}@${instance}:~/
    done

- name: copy kubeconfig into master node
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    for instance in {{ master_ip }}; do
        scp admin.kubeconfig {{ user }}@${instance}:~/
        scp kube-controller-manager.kubeconfig {{ user }}@${instance}:~/
        scp kube-scheduler.kubeconfig {{ user }}@${instance}:~/
        scp ${instance}.kubeconfig {{ user }}@${instance}:~/
        scp kube-proxy.kubeconfig {{ user }}@${instance}:~/
    done
