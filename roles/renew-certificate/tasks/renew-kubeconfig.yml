---
- name: generate kubeconfig for kubelet worker
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ worker_ip }}; do
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:{{ virtual_ip_k8s_port }}\
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate=${instance}.pem \
        --client-key=${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

- name: generate kubeconfig for kubelet master
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ master_ip }}; do
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:{{ virtual_ip_k8s_port }}\
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate=${instance}.pem \
        --client-key=${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

- name: generate kubeconfig for kubeproxy
  args:
    chdir: ~/certificate-template
  shell: |
    kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://{{ virtual_ip }}:{{ virtual_ip_k8s_port }} \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config set-credentials system:kube-proxy \
        --client-certificate=kube-proxy.pem \
        --client-key=kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:kube-proxy \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

- name: generate kubeconfig for controller-manager
  args:
    chdir: ~/certificate-template
  shell: |
    kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config set-credentials system:kube-controller-manager \
        --client-certificate=kube-controller-manager.pem \
        --client-key=kube-controller-manager-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:kube-controller-manager \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig

- name: generate kubeconfig for scheduler
  args:
    chdir: ~/certificate-template
  shell: |
    kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config set-credentials system:kube-scheduler \
        --client-certificate=kube-scheduler.pem \
        --client-key=kube-scheduler-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:kube-scheduler \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig

- name: generate kubeconfig for admin
  args:
    chdir: ~/certificate-template
  shell: |
    kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority=ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=admin.kubeconfig

    kubectl config set-credentials admin \
        --client-certificate=admin.pem \
        --client-key=admin-key.pem \
        --embed-certs=true \
        --kubeconfig=admin.kubeconfig

    kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=admin \
        --kubeconfig=admin.kubeconfig

    kubectl config use-context default --kubeconfig=admin.kubeconfig

- name: copy kubeconfig into worker node
  become: yes
  become_user: "{{ user }}"
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ worker_ip }}; do
        scp ${instance}.kubeconfig {{ user }}@${instance}:/var/lib/kubelet/kubeconfig
        scp kube-proxy.kubeconfig {{ user }}@${instance}:/var/lib/kube-proxy/kubeconfig
    done

- name: copy kubeconfig into master node
  become: yes
  become_user: "{{ user }}"
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: ~/certificate-template
  shell: |
    for instance in {{ master_ip }}; do
        scp admin.kubeconfig {{ user }}@${instance}:/root/.kube/config
        scp kube-controller-manager.kubeconfig {{ user }}@${instance}:/var/lib/kubernetes/kube-controller-manager.kubeconfig
        scp kube-scheduler.kubeconfig {{ user }}@${instance}:/var/lib/kubernetes/kube-scheduler.kubeconfig
        scp ${instance}.kubeconfig {{ user }}@${instance}:/var/lib/kubelet/kubeconfig
        scp kube-proxy.kubeconfig {{ user }}@${instance}:/var/lib/kube-proxy/kubeconfig
    done